End-to-end encryption using Kinto.js
###########################################

:date: 2015-09-14
:summary: How to encrypt data before sending it to the server.
:slug: encrypter-les-donnees
:lang: en
:url: encrypter-les-donnees

A guest post this time, by Michiel de Jong from the Firefox OS team! :)

As a first step in the Firefox OS
"[Data Sync](https://wiki.mozilla.org/Firefox_OS_Data_Sync)" project, we're working on
integrating Firefox OS with the Firefox Sync service that has already existed
for years in Firefox Desktop, and which is also supported by Firefox Android
and Firefox iOS. Adding Firefox OS to this family is an exciting challenge,
because one of the philosophical goals of Firefox OS is to push the web as a
platform for mobile apps, and we try to use the web platform wherever we can.

Data Sync is no exception there, and it turns out that with a combination of
[Kinto.js](https://github.com/Kinto/kinto.js) and
[WebCrypto](http://www.w3.org/TR/WebCryptoAPI/), we were already able to build a
[working proof-of-concept](https://www.youtube.com/watch?v=BEYgx5chun0)
at the Next-Generation-Architecture workweek in Paris last month.

To connect with the Firefox Sync Server, we use an in-between translating proxy
called [Syncto](https://github.com/mozilla-services/syncto), which translates
between the [Kinto protocol](http://kinto.readthedocs.org/en/latest/api/index.html)
in the front, and the
[SyncStorage protocol](https://docs.services.mozilla.com/storage/apis-1.5.html)
in the back. The Firefox Accounts credentials are still obtained
[by Gecko-layer code](https://developer.mozilla.org/en-US/docs/Firefox-Accounts-on-FirefoxOS),
but we hope to move some of the code into the web-based Gaia-layer soon too.

Data that is retrieved from Firefox Sync is decrypted as soon as it comes in,
and stored unencrypted inside Kinto.js, for fast access and easy updating. When
changes are pushed out to the remote server, it is encrypted again, just
before it leaves the JavaScript sandbox.

The way we tell Kinto.js that we want to use encryption, and provide our own
"encode" and "decode" procedures, is quite simple. When creating a Kinto
collection, we pass a RemoteTransformer as a collection-level option:

.. code-block:: javascript
  let kinto = new Kinto({
    bucket: 'syncto',
    remote: 'http://localhost:8000/v1/',     // The Syncto server's API endpoint
    headers: {
      'Authorization': 'BrowserID ' + '...', // Get this from Firefox Accounts
      'X-Client-State': '...'                // Get this from Firefox Accounts
  });

  let fxSyncWebCrypto = new FxSyncWebCrypto(cryptoKeys);

  let myBookmarks = kinto.collection('bookmarks', {
    remoteTransformers: [{
      encode(record) {
        return fxSyncWebCrypto.encrypt(record.payload).then(encryptedPayload => {
          record.payload = encryptedPayload;
          return record;
        });
      },
      decode(record) {
        return fxSyncWebCrypto.decrypt(record.payload).then(decryptedPayload => {
          record.payload = decryptedPayload;
          return record;
        });
      }
    }]
  });

  myBookmarks.sync().then(syncResults => {
    handleErrors(syncResults.errors);
    handleConflicts(syncResults.conflicts);
    return myBookmarks.list();
  }).then(list => {
    console.log(list);
    return myBookmarks.create({
      URL: 'http://www.w3.org/TR/WebCryptoAPI/',
      name: 'Web Cryptography API'
    });
  }).then(() => {
    return myBookmarks.sync();
  }).then(syncResults => {
    handleErrors(syncResults.errors);
    handleConflicts(syncResults.conflicts);
  });

The encryption happens in a little piece of code called FxSyncWebCrypto, which
basically uses WebCrypto to implement encrypting and decrypting Firefox Sync
records. Its API is not exactly like in the example above, and the Sync app of
which it forms part is still a work-in-progress, but you can already see it in
Gaia master,
[here](https://github.com/mozilla-b2g/gaia/tree/master/apps/sync/js/crypto).
The calls it uses from WebCrypto's window.crypto.subtle API are:

* importKey
* encrypt
* decrypt
* sign
* verify
